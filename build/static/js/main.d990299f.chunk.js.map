{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["testData","CardList","props","profiles","map","foo","key","id","Card","profile","this","className","style","color","marginTop","marginLeft","display","border","height","width","src","avatar_url","alt","font","name","company","React","Component","Form","state","userName","handleSubmit","event","a","preventDefault","axios","get","resp","onSubmit","data","setState","marginBottom","action","type","placeholder","required","value","onChange","target","App","addNewProfile","profileData","prevState","fontSize","fontWeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wUAMMA,EAAW,GAKjB,SAASC,EAASC,GAChB,OACE,oCACGA,EAAMC,SAASC,KAAI,SAACC,GAAD,OAClB,kBAAC,EAAD,eAAMC,IAAKD,EAAIE,IAAQF,Q,IAMzBG,E,uKAEF,IAAMC,EAAUC,KAAKR,MACrB,OACE,oCACE,yBAAKS,UAAU,QAASC,MAAO,CAACC,MAAM,aAAcC,UAAW,GAAGC,WAAW,GAAIC,QAAQ,UACvF,yBAAKJ,MAAO,CAAEK,OAAQ,kBAAmBD,QAAS,iBAChD,yBACEJ,MAAO,CAAEM,OAAQ,IAAKC,MAAO,KAC7BC,IAAKX,EAAQY,WACbC,IAAI,WAGR,yBAAKV,MAAO,CAAEI,QAAS,eAAgBD,WAAY,IACjD,yBAAKH,MAAO,CAAEW,KAAM,UAAYd,EAAQe,KAAxC,KACA,yBAAMZ,MAAO,CAAEW,KAAM,cAAgBd,EAAQgB,gB,GAftCC,IAAMC,WAuBnBC,E,4MACJC,MAAQ,CAAEC,SAAU,I,EACpBC,a,uCAAe,WAAOC,GAAP,eAAAC,EAAA,6DACbD,EAAME,iBADO,SAEMC,IAAMC,IAAN,uCACe,EAAKP,MAAMC,WAHhC,OAEPO,EAFO,OAKb,EAAKnC,MAAMoC,SAASD,EAAKE,MACzB,EAAKC,SAAS,CAAEV,SAAU,KANb,2C,6GASL,IAAD,OACP,OACE,yBAAKlB,MAAO,CAAE6B,aAAc,GAAGtB,MAAM,QACnC,yBAAKR,UAAU,OACb,yBAAKA,UAAU,6CACb,0BACE2B,SAAU5B,KAAKqB,aACfW,OAAO,GACP9B,MAAO,CAAEE,UAAW,KAEpB,yBAAKH,UAAU,cACb,2BACEA,UAAU,+BACVgC,KAAK,OACLC,YAAY,kBACZhC,MAAO,CAAEG,WAAY,GAAI0B,aAAc,IACvCI,UAAQ,EACRC,MAAOpC,KAAKmB,MAAMC,SAClBiB,SAAU,SAACf,GAAD,OACR,EAAKQ,SAAS,CAAEV,SAAUE,EAAMgB,OAAOF,WAG3C,4BACElC,MAAO,CAAEG,WAAY,GAAI0B,aAAc,GACvC9B,UAAU,0BAFZ,qB,GAjCGe,IAAMC,WAyEVsB,E,4MAxBbpB,MAAQ,CACN1B,SAAUH,G,EAEZkD,cAAgB,SAACC,GACf,EAAKX,UAAS,SAACY,GAAD,MAAgB,CAC5BjD,SAAS,GAAD,mBAAMiD,EAAUjD,UAAhB,CAA0BgD,S,uDAIpC,OACE,oCACE,yBAEEvC,MAAO,CAACC,MAAM,QAASE,WAAY,OAAQD,UAAW,GAAIuC,SAAU,GAAGC,WAAW,MAFpF,oBAMA,kBAAC,EAAD,CAAMhB,SAAU5B,KAAKwC,gBACrB,kBAACjD,EAAD,CAAUE,SAAUO,KAAKmB,MAAM1B,gB,GAnBrBuB,IAAMC,WChFJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d990299f.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/img-redundant-alt */\n//  eslint-disable jsx-a11y/img-redundant-alt\nimport React from \"react\";\nimport axios from \"axios\";\n// import \"./App.css\";\n\nconst testData = [\n \n];\n\n\nfunction CardList(props) {\n  return (\n    <>\n      {props.profiles.map((foo) => (\n        <Card key={foo.id} {...foo} />\n      ))}\n    </>\n  );\n}\n\nclass Card extends React.Component {\n  render() {\n    const profile = this.props;\n    return (\n      <>\n        <div className='cards'  style={{color:'whitesmoke', marginTop: 10,marginLeft:10, display:'block'}}>\n          <div style={{ border: \"1px solid white\", display: \"inline-block\" }}>\n            <img\n              style={{ height: 100, width: 100 }}\n              src={profile.avatar_url}\n              alt=\"image\"\n            />\n          </div>\n          <div style={{ display: \"inline-block\", marginLeft: 9 }}>\n            <div style={{ font: \"20px \" }}>{profile.name} </div>\n            <div  style={{ font: \"10px bold\" }}>{profile.company}</div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nclass Form extends React.Component {\n  state = { userName: \"\" };\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    const resp = await axios.get(\n      `https://api.github.com/users/${this.state.userName}`\n    );\n    this.props.onSubmit(resp.data);\n    this.setState({ userName: \"\" });\n  };\n\n  render() {\n    return (\n      <div style={{ marginBottom: 30,width:'90%' }}>\n        <div className=\"row\">\n          <div className=\"col-9 col-sm-7 col-md-6 col-lg-6 col-xl-5\">\n            <form\n              onSubmit={this.handleSubmit}\n              action=\"\"\n              style={{ marginTop: 20 }}\n            >\n              <div className=\"form-group\">\n                <input\n                  className=\"form-control form-control-sm\"\n                  type=\"text\"\n                  placeholder=\"GitHub username\"\n                  style={{ marginLeft: 10, marginBottom: 10 }}\n                  required\n                  value={this.state.userName}\n                  onChange={(event) =>\n                    this.setState({ userName: event.target.value })\n                  }\n                />\n                <button\n                  style={{ marginLeft: 10, marginBottom: 0 }}\n                  className=\"btn btn-success btn-sm\"\n                >\n                  Add card\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  state = {\n    profiles: testData,\n  };\n  addNewProfile = (profileData) => {\n    this.setState((prevState) => ({\n      profiles: [...prevState.profiles, profileData],\n    }));\n  };\n  render() {\n    return (\n      <>\n        <div\n          // class=\"container\"\n          style={{color:'white', marginLeft: \"2rem\", marginTop: 10, fontSize: 20,fontWeight:900 }}\n        >\n          GitHub Cards App\n        </div>\n        <Form onSubmit={this.addNewProfile} />\n        <CardList profiles={this.state.profiles} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./App.css\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}